module api_app_wizard {

    export class WizardPanelHeader extends api_dom.DivEl implements api_event.Observable {

        private displayNameEl:api_ui.TextInput;

        private nameEl:api_ui.TextInput;

        private autogenerateDisplayName:bool = false;

        private autogenerateName:bool = false;

        private listeners:WizardPanelHeaderListener[] = [];

        constructor() {
            super(null, "wizard-header");

            this.displayNameEl = api_ui.AutosizeTextInput.large().setName('displayName');
            this.displayNameEl.addListener({
                onValueChanged: (oldValue, newValue) => {
                    this.notifyDisplayNameChanged(oldValue, newValue);
                }
            });
            this.appendChild(this.displayNameEl);

            this.nameEl = api_ui.AutosizeTextInput.middle().setName('name').setForbiddenCharsRe(/[^a-z0-9\-]+/ig);
            this.nameEl.addListener({
                onValueChanged: (oldValue, newValue) => {
                    this.notifyNameChanged(oldValue, newValue);
                }
            });
            this.appendChild(this.nameEl);

            this.displayNameEl.getEl().addEventListener('input', () => {
                var displayNameValue = this.getDisplayName();

                // stop displayName autogeneration if user typed some values
                // or make it autogenerated if input became empty
                this.setAutogenerateDisplayName(!displayNameValue);

                if (this.isAutogenerateName()) {
                    this.setName(this.generateName(displayNameValue));
                }
            });

            this.nameEl.getEl().addEventListener('input', () => {
                var nameValue = this.getName();

                // stop name autogeneration if user typed some chars
                // or make it autogenerated if input became empty
                this.setAutogenerateName(!nameValue);
            });
        }

        getDisplayName():string {
            return this.displayNameEl.getValue();
        }

        setDisplayName(value:string) {
            this.displayNameEl.setValue(value);
        }

        getName():string {
            return this.nameEl.getValue();
        }

        setName(value:string) {
            this.nameEl.setValue(value);
        }

        isAutogenerateDisplayName():bool {
            return this.autogenerateDisplayName;
        }

        setAutogenerateDisplayName(value:bool) {
            this.autogenerateDisplayName = value;
        }

        isAutogenerateName():bool {
            return this.autogenerateName;
        }

        setAutogenerateName(value:bool) {
            this.autogenerateName = value;
        }

        generateName(value:string):string {
            return value ? value.replace(/[\s+\.\/]/ig, '-').replace(/-{2,}/g, '-').replace(/^-|-$/g, '').toLowerCase() : '';
        }

        addListener(listener:WizardPanelHeaderListener) {
            this.listeners.push(listener);
        }

        removeListener(listener:WizardPanelHeaderListener) {
            this.listeners = this.listeners.filter(function (curr) {
                return curr != listener;
            });
        }

        private notifyDisplayNameChanged(oldValue, newValue) {
            this.listeners.forEach((listener:WizardPanelHeaderListener) => {
                if (listener.onDisplayNameChanged) {
                    listener.onDisplayNameChanged(oldValue, newValue);
                }
            });
        }

        private notifyNameChanged(oldValue, newValue) {
            this.listeners.forEach((listener:WizardPanelHeaderListener) => {
                if (listener.onNameChanged) {
                    listener.onNameChanged(oldValue, newValue);
                }
            });
        }
    }
}