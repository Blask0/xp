Ext.define('Admin.view.WizardHeader', {
    extend: 'Ext.form.Panel',
    alias: 'widget.wizardHeader',

    cls: 'admin-wizard-header-container',

    layout: 'anchor',
    defaults: {
        anchor: '100%'
    },
    border: false,

    displayNameProperty: 'displayName',
    displayNameConfig: {
        allowBlank: false,
        emptyText: 'Display Name',
        enableKeyEvents: true,
        hideLabel: true
    },

    pathProperty: 'path',
    pathConfig: {
        hidden: false,
        emptyText: 'path/to/',
        hideLabel: true
    },

    nameProperty: 'name',

    nameConfig: {
        hidden: false,
        allowBlank: false,
        emptyText: 'Name',
        enableKeyEvents: true,
        hideLabel: true
    },


    initComponent: function () {
        var me = this;

        me.appendNameVtype();

        var headerData = this.prepareHeaderData(this.data);

        me.autogenerateName = Ext.isEmpty(headerData[this.nameProperty]);
        me.autogenerateDisplayName = Ext.isEmpty(headerData[this.displayNameProperty]);

        this.displayNameField = Ext.create('Ext.form.field.Text', Ext.apply({
            xtype: 'textfield',
            flex: 1,
            name: this.displayNameProperty,
            value: headerData[this.displayNameProperty],
            cls: 'admin-display-name',
            dirtyCls: 'admin-display-name-dirty',
            listeners: {
                afterrender: function (field) {
                    field.getFocusEl().focus(100);
                },
                keyup: me.onDisplayNameKey,
                change: me.onDisplayNameChanged,
                scope: me
            }
        }, me.displayNameConfig, Admin.view.WizardHeader.prototype.displayNameConfig));

        this.pathField = Ext.create('Ext.form.field.Display', Ext.apply({
            xtype: 'displayfield',
            cls: 'admin-path',
            dirtyCls: 'admin-path-dirty',
            value: headerData[this.pathProperty]
        }, me.pathConfig, Admin.view.WizardHeader.prototype.pathConfig));

        this.nameField = Ext.create('Ext.form.field.Text', Ext.apply({
            xtype: 'textfield',
            flex: 1,
            cls: 'admin-name',
            dirtyCls: 'admin-name-dirty',
            name: this.nameProperty,
            value: headerData[this.nameProperty],
            vtype: 'name',
            stripCharsRe: /[^a-z0-9\-]+/ig,
            listeners: {
                keyup: me.onNameKey,
                change: me.onNameChanged,
                scope: me
            }
        }, me.nameConfig, Admin.view.WizardHeader.prototype.nameConfig));


        this.items = [
            me.displayNameField
        ];

        if (!me.pathField.hidden && !me.nameField.hidden) {
            this.items.push({
                xtype: 'fieldcontainer',
                hideLabel: true,
                layout: 'hbox',
                items: [
                    me.pathField,
                    me.nameField
                ]
            });
        } else if (!me.pathField.hidden) {
            this.items.push(me.pathField);
        } else if (!me.nameField.hidden) {
            this.items.push(me.nameField);
        }

        this.callParent(arguments);
        this.addEvents('displaynamechange', 'displaynameoverride', 'namechange', 'nameoverride');
    },

    onDisplayNameKey: function (field, event, opts) {
        var wasAutoGenerate = this.autogenerateDisplayName;
        var autoGenerate = Ext.isEmpty(field.getValue());
        if (wasAutoGenerate != autoGenerate) {
            this.fireEvent('displaynameoverride', !autoGenerate);
        }
        this.autogenerateDisplayName = autoGenerate;
    },

    onDisplayNameChanged: function (field, newVal, oldVal, opts) {
        if (this.fireEvent('displaynamechange', newVal, oldVal) !== false && this.autogenerateName) {
            var processedValue = this.nameField.processRawValue(this.preProcessName(newVal));
            this.nameField.setValue(processedValue);
        }
    },

    onNameKey: function (field, event, opts) {
        var wasAutoGenerate = this.autogenerateName;
        var autoGenerate = Ext.isEmpty(field.getValue());
        if (wasAutoGenerate != autoGenerate) {
            this.fireEvent('nameoverride', !autoGenerate);
        }
        this.autogenerateName = autoGenerate;
    },

    onNameChanged: function (field, newVal, oldVal, opts) {
        this.fireEvent('namechange', newVal, oldVal);
    },

    appendNameVtype: function () {
        Ext.apply(Ext.form.field.VTypes, {
            //  vtype validation function
            name: function (val, field) {
                return /^[a-z0-9\-\/]+$/i.test(val);
            },
            // vtype Text property: The error text to display when the validation function returns false
            nameText: 'Not a valid name. Can contain digits, characters and "-" only.',
            // vtype Mask property: The keystroke filter mask
            nameMask: /^[a-z0-9\-\/]+$/i
        });
    },

    preProcessName: function (displayName) {
        return !Ext.isEmpty(displayName) ? displayName.replace(/\s+/ig, '-').toLowerCase() : '';
    },

    prepareHeaderData: function (data) {
        return data && data.data || {};
    },

    setData: function (data) {
        this.data = data;
        this.getForm().setValues(this.resolveHeaderData(data));
    },

    getData: function () {
        return this.getForm().getFieldValues();
    },

    getDisplayName: function () {
        return this.displayNameField.getValue();
    },

    setDisplayName: function (displayName) {
        this.displayNameField.setValue(displayName);
    }

});