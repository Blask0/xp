apply plugin: 'java-base'
apply plugin: 'distribution'

configurations {
    lib
    bundle
    bundle.transitive = false
}

dependencies {
    lib project( ':launcher' )
}

ext {
    bundlesDir = file( "$buildDir/bundles" )
    bundlesFile = file( "$projectDir/src/main/resources/system/bundles.xml" )
}

def getProjectMappings()
{
    def map = [:]
    project.rootProject.subprojects.each {
        map["${it.group}:${it.name}:${it.version}"] = it
    }
    return map
}

def expandGav( gav )
{
    def template = new groovy.text.SimpleTemplateEngine()
    return template.createTemplate( gav ).make( project.properties ).toString();
}

def addBundleDependencies()
{
    def mappings = getProjectMappings()
    def bundlesXml = new XmlSlurper().parse( bundlesFile )

    bundlesXml.bundle.each {
        def gav = expandGav( it.text().trim() )
        def dep = mappings[gav]

        if ( !dep )
        {
            dep = gav
        }

        dependencies.bundle dep
    }
}

addBundleDependencies();

task copyBundles( type: Copy ) {
    into bundlesDir
    from configurations.bundle
    rename { name ->
        def artifacts = configurations.bundle.resolvedConfiguration.resolvedArtifacts
        def artifact = artifacts.find { it.file.name == name }
        def id = artifact.moduleVersion.id
        def dir = id.group.replace( '.', '/' ) + "/${id.name}/${id.version}"
        def fileName = "${id.name}-${id.version}"

        if ( artifact.classifier != null )
        {
            fileName += '-' + artifact.classifier
        }

        return "${dir}/${fileName}.${artifact.extension}"
    }
}

distributions {
    main {
        baseName = 'enonic-xp'
        contents {
            into( 'bin' ) {
                from( 'src/main/resources/bin' ) {
                    include '*.sh'
                    fileMode 0755
                }
            }
            into( 'lib' ) {
                from( configurations.lib )
            }
            into( 'system' ) {
                from( bundlesDir )
                from( bundlesFile ) {
                    expand project.properties
                }
            }
            from( 'src/main/resources' ) {
                include 'README.txt'
                expand project.properties
            }
            from( 'src/main/resources' )
        }
    }
}

distTar {
    compression = Compression.GZIP
    extension = 'tar.gz'
}

installDist.dependsOn += copyBundles
distTar.dependsOn += installDist
distZip.dependsOn += installDist

artifacts {
    archives distTar
    archives distZip
}
