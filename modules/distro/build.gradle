apply plugin: 'java-base'

configurations {
    lib
    toolbox
    bundle
    bundle.transitive = false
}

dependencies {
    lib project( ':launcher' )
    toolbox project( ':toolbox' )
}

ext {
    installDir = "$buildDir/install"
    bundlesDir = "$installDir/system"
    bundlesFile = "$projectDir/src/system/bundles.xml"
    archiveBase = "enonic-xp-$version"
}

def getProjectMappings()
{
    def map = [:]
    project.rootProject.subprojects.each {
        map["${it.group}:${it.name}:${it.version}"] = it
    }
    return map
}

def expandGav( gav )
{
    def template = new groovy.text.SimpleTemplateEngine()
    return template.createTemplate( gav ).make( project.properties ).toString();
}

def addBundleDependencies()
{
    def mappings = getProjectMappings()
    def bundlesXml = new XmlSlurper().parse( bundlesFile )

    bundlesXml.bundle.each {
        def gav = expandGav( it.text().trim() )
        def dep = mappings[gav]

        if ( !dep )
        {
            dep = gav
        }

        dependencies.bundle dep
    }
}

addBundleDependencies();

task copyBundles( type: Copy ) {
    into bundlesDir
    from configurations.bundle
    rename { name ->
        def artifacts = configurations.bundle.resolvedConfiguration.resolvedArtifacts
        def artifact = artifacts.find { it.file.name == name }
        def id = artifact.moduleVersion.id
        def dir = id.group.replace( '.', '/' ) + "/${id.name}/${id.version}"
        def fileName = "${id.name}-${id.version}"

        if ( artifact.classifier != null )
        {
            fileName += '-' + artifact.classifier
        }

        return "${dir}/${fileName}.${artifact.extension}"
    }
}

task copyResources( type: Copy ) {
    destinationDir = file( installDir )
    into( 'bin' ) {
        from( 'src/bin' ) {
            include '*.sh'
            fileMode 0755
        }
    }
    into( 'tools' ) {
        from( 'src/tools' ) {
            include '*.sh'
            fileMode 0755
        }
    }
    into( 'lib' ) {
        from( configurations.lib )
    }
    into( 'system' ) {
        from( bundlesFile ) {
            expand project.properties
        }
    }
    into( 'toolbox' ) {
        from( 'src/toolbox' ) {
            include '*.sh'
            fileMode 0755
        }
    }
    into( 'toolbox/lib' ) {
        from( configurations.toolbox )
    }
    from( 'src' ) {
        include 'README.txt'
        expand project.properties
    }
    from( 'src' )
    from( rootDir ) {
        include 'LICENSE.txt'
        include 'NOTICE.txt'
    }
}

task installDist( dependsOn: [copyResources, copyBundles] )

task distZip( type: Zip, dependsOn: installDist ) {
    from installDir
    into archiveBase
}

def javadocProjects = project.parent.subprojects.findAll { project -> project.name.endsWith( '-api' ) }

task javadoc( type: Javadoc ) {
    source javadocProjects.collect { project -> project.sourceSets.main.allJava }
    classpath = files( javadocProjects.collect { project -> project.sourceSets.main.compileClasspath } )
    failOnError = false
    title = "Enonic XP API ${version}"
    verbose = false

    options {
        links 'http://docs.oracle.com/javase/8/docs/api'
        links 'http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc'
        quiet()
        encoding( 'UTF-8' )
    }
}

task javadocZip( type: Zip ) {
    from javadoc
    classifier = 'javadoc'
}

artifacts {
    archives distZip
    archives javadocZip
}
